# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build & Push docker image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKERHUB_PWD: ${{ secrets.DOCKERHUB_PWD }}
        run: mvn -B spring-boot:build-image -DskipTests

      # Install oc (OpenShift CLI)
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with: 
          oc: "latest"

      # Authenticate and set context
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_NAMESPACE: mannemmanindra001-dev
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      # Apply manifest files
      - name: Deploy
        run: |
          oc apply -f k8s/service.yml
          oc apply -f k8s/config.yml
          oc apply -f k8s/deployment.yml
          oc rollout status deployment/movie-service
